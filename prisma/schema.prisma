// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Supabase connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  refresh_token_expires_in Int? // 추가: refresh_token 만료 시간(초)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // 이메일 로그인용 (선택적)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  ownedClubs    BookClub[] @relation("ClubOwner")
  memberClubs   BookClub[] @relation("ClubMembers")
  posts         Post[]
  meetings      Meeting[]  @relation("MeetingParticipants")
  createdMeetings Meeting[] @relation("MeetingCreator")
}

model BookClub {
  id          String    @id @default(cuid())
  name        String
  description String?
  category    String
  ownerId     String
  owner       User      @relation("ClubOwner", fields: [ownerId], references: [id])
  members     User[]    @relation("ClubMembers")
  meetings    Meeting[]
  posts       Post[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Meeting {
  id                String            @id @default(cuid())
  title             String
  description       String?
  meetingDate       DateTime
  maxParticipants   Int
  address           String            // 주소 (다음 우편번호 API로 검색한 주소)
  detailedAddress   String?           // 상세 주소 (건물명, 층수, 호수 등)
  startTime         String            // HH:mm format
  endTime           String            // HH:mm format
  recommendationReason String
  range             String?
  bookId            String
  book              Book              @relation(fields: [bookId], references: [id])
  clubId            String?           // 선택적으로 변경
  club              BookClub?         @relation(fields: [clubId], references: [id]) // 선택적으로 변경
  creatorId         String            // 모임을 만든 사람의 ID
  creator           User              @relation("MeetingCreator", fields: [creatorId], references: [id])
  participants      User[]            @relation("MeetingParticipants")
  discussion        Discussion?
  attachments       Attachment[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Book {
  id          String       @id @default(cuid())
  title       String
  author      String
  description String?
  isbn        String?     @unique  // ISBN을 String으로 저장
  category    String
  imageUrl    String?      // 도서 표지 이미지 URL
  link        String?      // 도서 상세 정보 URL
  publisher   String?      // 출판사
  price       Int?         // 가격
  pubDate     DateTime?    // 출간일
  recommendationReason String?  // 추천 이유
  meetings    Meeting[]
  discussions Discussion[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Discussion {
  id        String   @id @default(cuid())
  questions String[]
  meetingId String?  @unique
  meeting   Meeting? @relation(fields: [meetingId], references: [id])
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  clubId    String
  club      BookClub @relation(fields: [clubId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id        String   @id @default(cuid())
  filename  String
  originalName String
  mimeType  String
  size      Int
  path      String   // 서버에 저장된 파일 경로
  meetingId String
  meeting   Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
